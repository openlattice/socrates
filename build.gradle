plugins {
    id "application"
    id 'org.jetbrains.kotlin.jvm' version '1.2.30'
    id "java"
    id "eclipse"
    id "idea"
    id "jacoco"
}

description = "Socrates Server"
group = "com.openlattice"

distTar {
    archiveName "socrates.tgz"
}

ext.projectName = "socrates"
ext.scmUrl = 'scm:git:https://github.com/openlattice/socrates.git'
ext.connectionUrl = 'scm:git:https://github.com/openlattice/socrates.git'
ext.developerConnectionUrl = 'scm:git:https://github.com/openlattice/socrates.git'

apply from: "https://raw.githubusercontent.com/openlattice/gradles/master/openlattice.gradle"
apply plugin: 'kotlin'

def SOCRATES_XMS = "$System.env.SOCRATES_XMS"
def SOCRATES_XMX = "$System.env.SOCRATES_XMX"
def S_ARGS = "$System.env.SOCRATES_ARGS"
def PARALLEL = "$System.env.PARALLELISM"
def GC = "$System.env.GC"

if (SOCRATES_XMS == 'null' || SOCRATES_XMS == null || SOCRATES_XMS == "") {
    SOCRATES_XMS = '-Xms1g'
}

if (SOCRATES_XMX == 'null' || SOCRATES_XMX == null || SOCRATES_XMX == "") {
    SOCRATES_XMX = '-Xms4g'
}

if (S_ARGS == 'null' || S_ARGS == null || S_ARGS == "") {
    S_ARGS = 'cassandra spark local'
}

if( PARALLEL == 'null' || PARALLEL == null || PARALLEL == "" ) {
    PARALLEL = "-Djava.util.concurrent.ForkJoinPool.common.parallelism=" + Runtime.runtime.availableProcessors()
}

if (GC == 'null' || GC == null || GC == "") {
    GC = "-XX:+UseG1GC"
}


applicationDefaultJvmArgs = [SOCRATES_XMS, SOCRATES_XMX, "-server", PARALLEL, GC]
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

println "Using java args for running ${projectName}: " + Arrays.toString( applicationDefaultJvmArgs )


mainClassName = "com.openlattice.socrates.Extractor"

run {
    if (S_ARGS != null) {
        args S_ARGS.split()
    } else if (System.getProperty("exec.args") != null) {
        args System.getProperty("exec.args").split()
    }
    if (project.hasProperty('appArgs')){
        args Eval.me(appArgs)
    }

}


println "Enabled profiles: " + Arrays.toString(run.args)

configurations {
    provided
}

final jacksonversion = "2.6.7"

configurations.all {
    resolutionStrategy {
        force "com.fasterxml.jackson.core:jackson-core:${jacksonversion}",
                "com.fasterxml.jackson.core:jackson-databind:${jacksonversion}",
                "com.fasterxml.jackson.module:jackson-module-afterburner:${jacksonversion}",
                "com.fasterxml.jackson.datatype:jackson-datatype-guava:${jacksonversion}",
                "com.fasterxml.jackson.dataformat:jackson-dataformat-smile:${jacksonversion}",
                "com.fasterxml.jackson.module:jackson-module-jaxb-annotations:${jacksonversion}",
                "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonversion}",
                "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:${jacksonversion}"
    }
    exclude module: 'slf4j-log4j12'
    exclude group: 'asm', module: 'asm'
}

sourceSets {
    main.compileClasspath += configurations.provided
    test.compileClasspath += configurations.provided
    test.runtimeClasspath += configurations.provided
}

dependencies {
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-csv:${jacksonversion}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-guava:${jacksonversion}"
    compile "com.fasterxml.jackson.module:jackson-module-afterburner:${jacksonversion}"

    compile 'commons-cli:commons-cli:1.4'
    compile 'org.deeplearning4j:deeplearning4j-core:0.9.1'

    compile 'org.nd4j:nd4j-native-platform:0.9.1'
    compile 'org.datavec:datavec-api:0.9.1'

    compile 'org.deeplearning4j:dl4j-spark_2.11:0.9.1_spark_2'
    compile 'org.deeplearning4j:deeplearning4j-ui_2.11:0.9.1'
    compile('org.apache.hadoop:hadoop-mapreduce-client-core:2.7.2') {force = true}
    compile('org.apache.hadoop:hadoop-common:2.7.2') {force = true}
    compile('org.apache.hadoop:hadoop-client:2.7.2') {force = true}
    compile "org.ow2.asm:asm:5.0.4"

    if (project.hasProperty('developmentMode') && project.developmentMode) {
        logger.quiet(project.name + " using project dependencies.")
    } else {
        logger.quiet(project.name + " using jar dependencies.")
    }
    /*
     * TESTING
     */
    testCompile "junit:junit:${junit_version}"
    testCompile "org.mockito:mockito-all:${mockito_version}"
}

eclipse {
    ext.downloadSources = true
    ext.downloadJavadoc = true

    ext.sourceCompatibility = JavaVersion.VERSION_1_8
    ext.targetCompatibility = JavaVersion.VERSION_1_8
}

eclipse.classpath.plusConfigurations += [configurations.provided] 
