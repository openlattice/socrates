plugins {
    id "application"
    id "java"
    id "eclipse"
    id "idea"
    id "jacoco"
    id 'com.github.spotbugs' version '2.0.1'
    id 'org.jetbrains.kotlin.jvm' version '1.3.61'
id 'org.jetbrains.kotlin.plugin.spring' version '1.3.61'
}

description = "Socrates Server"
group = "com.openlattice"

distTar {
    archiveName "socrates.tgz"
}

ext.projectName = "socrates"
ext.scmUrl = 'scm:git:https://github.com/openlattice/socrates.git'
ext.connectionUrl = 'scm:git:https://github.com/openlattice/socrates.git'
ext.developerConnectionUrl = 'scm:git:https://github.com/openlattice/socrates.git'

apply from: "https://raw.githubusercontent.com/openlattice/gradles/master/openlattice.gradle"
apply plugin: 'kotlin'

def SOCRATES_XMS = "$System.env.SOCRATES_XMS"
def SOCRATES_XMX = "$System.env.SOCRATES_XMX"
def S_ARGS = "$System.env.SOCRATES_ARGS"
def PARALLEL = "$System.env.PARALLELISM"
def GC = "$System.env.GC"

if (SOCRATES_XMS == 'null' || SOCRATES_XMS == null || SOCRATES_XMS == "") {
    SOCRATES_XMS = '-Xms1g'
}

if (SOCRATES_XMX == 'null' || SOCRATES_XMX == null || SOCRATES_XMX == "") {
    SOCRATES_XMX = '-Xms4g'
}

if (S_ARGS == 'null' || S_ARGS == null || S_ARGS == "") {
    S_ARGS = 'spark local'
}

if( PARALLEL == 'null' || PARALLEL == null || PARALLEL == "" ) {
    PARALLEL = "-Djava.util.concurrent.ForkJoinPool.common.parallelism=" + Runtime.runtime.availableProcessors()
}

if (GC == 'null' || GC == null || GC == "") {
    GC = "-XX:+UseG1GC"
}


mainClassName = "com.openlattice.socrates.Socrates"
applicationDefaultJvmArgs = [SOCRATES_XMS, SOCRATES_XMX, "-server", PARALLEL, GC]
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

println "Using java args for running ${projectName}: " + Arrays.toString( applicationDefaultJvmArgs )

run {
    if (S_ARGS != null) {
        args S_ARGS.split()
    } else if (System.getProperty("exec.args") != null) {
        args System.getProperty("exec.args").split()
    }
}

println "Enabled profiles: " + Arrays.toString(run.args)

configurations {
    provided
}

configurations.all {
    exclude module: 'slf4j-log4j12'
    exclude group: 'asm', module: 'asm'
}

sourceSets {
    main.compileClasspath += configurations.provided
    test.compileClasspath += configurations.provided
    test.runtimeClasspath += configurations.provided
}

dependencies {
    spotbugsPlugins "com.h3xstream.findsecbugs:findsecbugs-plugin:${findsecbugs_version}"
    compileOnly "net.jcip:jcip-annotations:${jcip_version}"
    compileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs_annotations_version}"
    testCompileOnly "net.jcip:jcip-annotations:${jcip_version}"
    testCompileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs_annotations_version}"

    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-csv:${jackson_version}"
    compile "commons-cli:commons-cli:$commons_cli_version"
    compile "org.deeplearning4j:deeplearning4j-core:${deeplearning4j}"

    compile "org.nd4j:nd4j-cuda-9.2-platform:${deeplearning4j}"
    compile "org.nd4j:nd4j-native-platform:${deeplearning4j}"
    compile "org.datavec:datavec-api:${deeplearning4j}"

    compile "org.deeplearning4j:deeplearning4j-parallel-wrapper:${deeplearning4j}"
    compile "org.deeplearning4j:dl4j-spark_2.11:${deeplearning4j}_spark_2"
    compile "org.deeplearning4j:deeplearning4j-ui_2.11:${deeplearning4j}"
    compile("org.apache.hadoop:hadoop-mapreduce-client-core:$hadoop_version") {force = true}
    compile("org.apache.hadoop:hadoop-common:$hadoop_version") {force = true}
    compile("org.apache.hadoop:hadoop-client:$hadoop_version") {force = true}
//    compile "org.apache.spark:spark-core_2.11:${spark_version}"
//    compile "org.apache.spark:spark-sql_2.11:${spark_version}"
//    compile "org.apache.spark:spark-mllib_2.11:${spark_version}"
//    compile "org.apache.spark:spark-graphx_2.11:${spark_version}"
//    compile "org.apache.spark:spark-streaming_2.11:${spark_version}"
    compile "org.ow2.asm:asm:$asm_version"

    if (project.hasProperty('developmentMode') && project.developmentMode) {
        logger.quiet(project.name + " using project dependencies.")
        compile project(":rhizome")
        compile project(":conductor-client")
    } else {
        logger.quiet(project.name + " using jar dependencies.")
        compile "com.openlattice:rhizome:${rhizome_version}"
        compile "com.openlattice:conductor-client:${conductor_client_version}"
    }
    /*
     * TESTING
     */
    testCompile "junit:junit:${junit_version}"
    testCompile "org.mockito:mockito-all:${mockito_version}"
}

eclipse {
    ext.downloadSources = true
    ext.downloadJavadoc = true

    ext.sourceCompatibility = JavaVersion.VERSION_1_8
    ext.targetCompatibility = JavaVersion.VERSION_1_8
}

eclipse.classpath.plusConfigurations += [configurations.provided] 
